/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.2
 * source: patient.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\protobuf\\timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace patient {
    export class SendLoginLinkRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): SendLoginLinkRequest {
            const message = new SendLoginLinkRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendLoginLinkRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendLoginLinkRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendLoginLinkRequest {
            return SendLoginLinkRequest.deserialize(bytes);
        }
    }
    export class SendLoginLinkResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): SendLoginLinkResponse {
            const message = new SendLoginLinkResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendLoginLinkResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendLoginLinkResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendLoginLinkResponse {
            return SendLoginLinkResponse.deserialize(bytes);
        }
    }
    export class ValidateLoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): ValidateLoginRequest {
            const message = new ValidateLoginRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateLoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateLoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateLoginRequest {
            return ValidateLoginRequest.deserialize(bytes);
        }
    }
    export class ValidateLoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): ValidateLoginResponse {
            const message = new ValidateLoginResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateLoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateLoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateLoginResponse {
            return ValidateLoginResponse.deserialize(bytes);
        }
    }
    export class ChangePasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            old_password?: string;
            new_password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("old_password" in data && data.old_password != undefined) {
                    this.old_password = data.old_password;
                }
                if ("new_password" in data && data.new_password != undefined) {
                    this.new_password = data.new_password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get old_password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set old_password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set new_password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            email?: string;
            old_password?: string;
            new_password?: string;
        }): ChangePasswordRequest {
            const message = new ChangePasswordRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.old_password != null) {
                message.old_password = data.old_password;
            }
            if (data.new_password != null) {
                message.new_password = data.new_password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                old_password?: string;
                new_password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.old_password != null) {
                data.old_password = this.old_password;
            }
            if (this.new_password != null) {
                data.new_password = this.new_password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.old_password.length)
                writer.writeString(2, this.old_password);
            if (this.new_password.length)
                writer.writeString(3, this.new_password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangePasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangePasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.old_password = reader.readString();
                        break;
                    case 3:
                        message.new_password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangePasswordRequest {
            return ChangePasswordRequest.deserialize(bytes);
        }
    }
    export class ChangePasswordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): ChangePasswordResponse {
            const message = new ChangePasswordResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangePasswordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangePasswordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangePasswordResponse {
            return ChangePasswordResponse.deserialize(bytes);
        }
    }
    export class PatientEmail extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): PatientEmail {
            const message = new PatientEmail({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PatientEmail {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PatientEmail();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PatientEmail {
            return PatientEmail.deserialize(bytes);
        }
    }
    export class PatientExistsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            exists?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("exists" in data && data.exists != undefined) {
                    this.exists = data.exists;
                }
            }
        }
        get exists() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set exists(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            exists?: boolean;
        }): PatientExistsResponse {
            const message = new PatientExistsResponse({});
            if (data.exists != null) {
                message.exists = data.exists;
            }
            return message;
        }
        toObject() {
            const data: {
                exists?: boolean;
            } = {};
            if (this.exists != null) {
                data.exists = this.exists;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.exists != false)
                writer.writeBool(1, this.exists);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PatientExistsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PatientExistsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.exists = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PatientExistsResponse {
            return PatientExistsResponse.deserialize(bytes);
        }
    }
    export class GetPatientByEmailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): GetPatientByEmailRequest {
            const message = new GetPatientByEmailRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPatientByEmailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPatientByEmailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPatientByEmailRequest {
            return GetPatientByEmailRequest.deserialize(bytes);
        }
    }
    export class GetPatientByEmailResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            patient?: Patient;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("patient" in data && data.patient != undefined) {
                    this.patient = data.patient;
                }
            }
        }
        get patient() {
            return pb_1.Message.getWrapperField(this, Patient, 1) as Patient;
        }
        set patient(value: Patient) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_patient() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            patient?: ReturnType<typeof Patient.prototype.toObject>;
        }): GetPatientByEmailResponse {
            const message = new GetPatientByEmailResponse({});
            if (data.patient != null) {
                message.patient = Patient.fromObject(data.patient);
            }
            return message;
        }
        toObject() {
            const data: {
                patient?: ReturnType<typeof Patient.prototype.toObject>;
            } = {};
            if (this.patient != null) {
                data.patient = this.patient.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_patient)
                writer.writeMessage(1, this.patient, () => this.patient.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPatientByEmailResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPatientByEmailResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.patient, () => message.patient = Patient.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPatientByEmailResponse {
            return GetPatientByEmailResponse.deserialize(bytes);
        }
    }
    export class GetPatientByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): GetPatientByIdRequest {
            const message = new GetPatientByIdRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPatientByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPatientByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPatientByIdRequest {
            return GetPatientByIdRequest.deserialize(bytes);
        }
    }
    export class GetPatientByIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            patient?: Patient;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("patient" in data && data.patient != undefined) {
                    this.patient = data.patient;
                }
            }
        }
        get patient() {
            return pb_1.Message.getWrapperField(this, Patient, 1) as Patient;
        }
        set patient(value: Patient) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_patient() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            patient?: ReturnType<typeof Patient.prototype.toObject>;
        }): GetPatientByIdResponse {
            const message = new GetPatientByIdResponse({});
            if (data.patient != null) {
                message.patient = Patient.fromObject(data.patient);
            }
            return message;
        }
        toObject() {
            const data: {
                patient?: ReturnType<typeof Patient.prototype.toObject>;
            } = {};
            if (this.patient != null) {
                data.patient = this.patient.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_patient)
                writer.writeMessage(1, this.patient, () => this.patient.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPatientByIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPatientByIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.patient, () => message.patient = Patient.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPatientByIdResponse {
            return GetPatientByIdResponse.deserialize(bytes);
        }
    }
    export class AddPatientRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            patient?: Patient;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("patient" in data && data.patient != undefined) {
                    this.patient = data.patient;
                }
            }
        }
        get patient() {
            return pb_1.Message.getWrapperField(this, Patient, 1) as Patient;
        }
        set patient(value: Patient) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_patient() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            patient?: ReturnType<typeof Patient.prototype.toObject>;
        }): AddPatientRequest {
            const message = new AddPatientRequest({});
            if (data.patient != null) {
                message.patient = Patient.fromObject(data.patient);
            }
            return message;
        }
        toObject() {
            const data: {
                patient?: ReturnType<typeof Patient.prototype.toObject>;
            } = {};
            if (this.patient != null) {
                data.patient = this.patient.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_patient)
                writer.writeMessage(1, this.patient, () => this.patient.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddPatientRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddPatientRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.patient, () => message.patient = Patient.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddPatientRequest {
            return AddPatientRequest.deserialize(bytes);
        }
    }
    export class UpdatePatientRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            patient?: Patient;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("patient" in data && data.patient != undefined) {
                    this.patient = data.patient;
                }
            }
        }
        get patient() {
            return pb_1.Message.getWrapperField(this, Patient, 1) as Patient;
        }
        set patient(value: Patient) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_patient() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            patient?: ReturnType<typeof Patient.prototype.toObject>;
        }): UpdatePatientRequest {
            const message = new UpdatePatientRequest({});
            if (data.patient != null) {
                message.patient = Patient.fromObject(data.patient);
            }
            return message;
        }
        toObject() {
            const data: {
                patient?: ReturnType<typeof Patient.prototype.toObject>;
            } = {};
            if (this.patient != null) {
                data.patient = this.patient.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_patient)
                writer.writeMessage(1, this.patient, () => this.patient.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePatientRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePatientRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.patient, () => message.patient = Patient.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePatientRequest {
            return UpdatePatientRequest.deserialize(bytes);
        }
    }
    export class DeletePatientRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): DeletePatientRequest {
            const message = new DeletePatientRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeletePatientRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeletePatientRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeletePatientRequest {
            return DeletePatientRequest.deserialize(bytes);
        }
    }
    export class AddPatientResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            patientId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("patientId" in data && data.patientId != undefined) {
                    this.patientId = data.patientId;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get patientId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set patientId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            message?: string;
            patientId?: number;
        }): AddPatientResponse {
            const message = new AddPatientResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.patientId != null) {
                message.patientId = data.patientId;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                patientId?: number;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.patientId != null) {
                data.patientId = this.patientId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.patientId != 0)
                writer.writeInt64(2, this.patientId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddPatientResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddPatientResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.patientId = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddPatientResponse {
            return AddPatientResponse.deserialize(bytes);
        }
    }
    export class UpdatePatientResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): UpdatePatientResponse {
            const message = new UpdatePatientResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePatientResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePatientResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePatientResponse {
            return UpdatePatientResponse.deserialize(bytes);
        }
    }
    export class DeletePatientResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): DeletePatientResponse {
            const message = new DeletePatientResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeletePatientResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeletePatientResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeletePatientResponse {
            return DeletePatientResponse.deserialize(bytes);
        }
    }
    export class Patient extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            address?: string;
            email?: string;
            phoneNumber?: string;
            gender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("phoneNumber" in data && data.phoneNumber != undefined) {
                    this.phoneNumber = data.phoneNumber;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get phoneNumber() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set phoneNumber(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set gender(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            address?: string;
            email?: string;
            phoneNumber?: string;
            gender?: string;
        }): Patient {
            const message = new Patient({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.phoneNumber != null) {
                message.phoneNumber = data.phoneNumber;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                address?: string;
                email?: string;
                phoneNumber?: string;
                gender?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.phoneNumber != null) {
                data.phoneNumber = this.phoneNumber;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.address.length)
                writer.writeString(3, this.address);
            if (this.email.length)
                writer.writeString(4, this.email);
            if (this.phoneNumber.length)
                writer.writeString(5, this.phoneNumber);
            if (this.gender.length)
                writer.writeString(6, this.gender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Patient {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Patient();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.address = reader.readString();
                        break;
                    case 4:
                        message.email = reader.readString();
                        break;
                    case 5:
                        message.phoneNumber = reader.readString();
                        break;
                    case 6:
                        message.gender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Patient {
            return Patient.deserialize(bytes);
        }
    }
    export class Empty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Empty {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    export class GetAllPatientsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            patients?: Patient[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("patients" in data && data.patients != undefined) {
                    this.patients = data.patients;
                }
            }
        }
        get patients() {
            return pb_1.Message.getRepeatedWrapperField(this, Patient, 1) as Patient[];
        }
        set patients(value: Patient[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            patients?: ReturnType<typeof Patient.prototype.toObject>[];
        }): GetAllPatientsResponse {
            const message = new GetAllPatientsResponse({});
            if (data.patients != null) {
                message.patients = data.patients.map(item => Patient.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                patients?: ReturnType<typeof Patient.prototype.toObject>[];
            } = {};
            if (this.patients != null) {
                data.patients = this.patients.map((item: Patient) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.patients.length)
                writer.writeRepeatedMessage(1, this.patients, (item: Patient) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllPatientsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllPatientsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.patients, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Patient.deserialize(reader), Patient));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllPatientsResponse {
            return GetAllPatientsResponse.deserialize(bytes);
        }
    }
    export class RendezVousDto extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            patientId?: number;
            doctor_id?: number;
            start_time?: dependency_1.google.protobuf.Timestamp;
            end_time?: dependency_1.google.protobuf.Timestamp;
            notes?: string;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("patientId" in data && data.patientId != undefined) {
                    this.patientId = data.patientId;
                }
                if ("doctor_id" in data && data.doctor_id != undefined) {
                    this.doctor_id = data.doctor_id;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("notes" in data && data.notes != undefined) {
                    this.notes = data.notes;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get patientId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set patientId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get doctor_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set doctor_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get notes() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set notes(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: number;
            patientId?: number;
            doctor_id?: number;
            start_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            notes?: string;
            status?: string;
        }): RendezVousDto {
            const message = new RendezVousDto({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.patientId != null) {
                message.patientId = data.patientId;
            }
            if (data.doctor_id != null) {
                message.doctor_id = data.doctor_id;
            }
            if (data.start_time != null) {
                message.start_time = dependency_1.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_1.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            if (data.notes != null) {
                message.notes = data.notes;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                patientId?: number;
                doctor_id?: number;
                start_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                notes?: string;
                status?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.patientId != null) {
                data.patientId = this.patientId;
            }
            if (this.doctor_id != null) {
                data.doctor_id = this.doctor_id;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            if (this.notes != null) {
                data.notes = this.notes;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.patientId != 0)
                writer.writeInt32(2, this.patientId);
            if (this.doctor_id != 0)
                writer.writeInt32(3, this.doctor_id);
            if (this.has_start_time)
                writer.writeMessage(4, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(5, this.end_time, () => this.end_time.serialize(writer));
            if (this.notes.length)
                writer.writeString(6, this.notes);
            if (this.status.length)
                writer.writeString(7, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RendezVousDto {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RendezVousDto();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.patientId = reader.readInt32();
                        break;
                    case 3:
                        message.doctor_id = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.notes = reader.readString();
                        break;
                    case 7:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RendezVousDto {
            return RendezVousDto.deserialize(bytes);
        }
    }
    export class GetPatientRendezVousRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            patientId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("patientId" in data && data.patientId != undefined) {
                    this.patientId = data.patientId;
                }
            }
        }
        get patientId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set patientId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            patientId?: number;
        }): GetPatientRendezVousRequest {
            const message = new GetPatientRendezVousRequest({});
            if (data.patientId != null) {
                message.patientId = data.patientId;
            }
            return message;
        }
        toObject() {
            const data: {
                patientId?: number;
            } = {};
            if (this.patientId != null) {
                data.patientId = this.patientId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.patientId != 0)
                writer.writeInt32(1, this.patientId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPatientRendezVousRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPatientRendezVousRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.patientId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPatientRendezVousRequest {
            return GetPatientRendezVousRequest.deserialize(bytes);
        }
    }
    export class GetPatientRendezVousResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rendezVous?: RendezVousDto[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rendezVous" in data && data.rendezVous != undefined) {
                    this.rendezVous = data.rendezVous;
                }
            }
        }
        get rendezVous() {
            return pb_1.Message.getRepeatedWrapperField(this, RendezVousDto, 1) as RendezVousDto[];
        }
        set rendezVous(value: RendezVousDto[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            rendezVous?: ReturnType<typeof RendezVousDto.prototype.toObject>[];
        }): GetPatientRendezVousResponse {
            const message = new GetPatientRendezVousResponse({});
            if (data.rendezVous != null) {
                message.rendezVous = data.rendezVous.map(item => RendezVousDto.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                rendezVous?: ReturnType<typeof RendezVousDto.prototype.toObject>[];
            } = {};
            if (this.rendezVous != null) {
                data.rendezVous = this.rendezVous.map((item: RendezVousDto) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rendezVous.length)
                writer.writeRepeatedMessage(1, this.rendezVous, (item: RendezVousDto) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPatientRendezVousResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPatientRendezVousResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rendezVous, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RendezVousDto.deserialize(reader), RendezVousDto));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPatientRendezVousResponse {
            return GetPatientRendezVousResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPatientProtoService {
        static definition = {
            GetPatientById: {
                path: "/patient.PatientProto/GetPatientById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPatientByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPatientByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPatientByIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPatientByIdResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllPatients: {
                path: "/patient.PatientProto/GetAllPatients",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllPatientsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllPatientsResponse.deserialize(new Uint8Array(bytes))
            },
            AddPatient: {
                path: "/patient.PatientProto/AddPatient",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddPatientRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddPatientRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddPatientResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddPatientResponse.deserialize(new Uint8Array(bytes))
            },
            UpdatePatient: {
                path: "/patient.PatientProto/UpdatePatient",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdatePatientRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdatePatientRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdatePatientResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdatePatientResponse.deserialize(new Uint8Array(bytes))
            },
            DeletePatient: {
                path: "/patient.PatientProto/DeletePatient",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeletePatientRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeletePatientRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeletePatientResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeletePatientResponse.deserialize(new Uint8Array(bytes))
            },
            GetPatientRendezVous: {
                path: "/patient.PatientProto/GetPatientRendezVous",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPatientRendezVousRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPatientRendezVousRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPatientRendezVousResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPatientRendezVousResponse.deserialize(new Uint8Array(bytes))
            },
            GetPatientByEmail: {
                path: "/patient.PatientProto/GetPatientByEmail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetPatientByEmailRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetPatientByEmailRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPatientByEmailResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPatientByEmailResponse.deserialize(new Uint8Array(bytes))
            },
            CheckPatientExists: {
                path: "/patient.PatientProto/CheckPatientExists",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PatientEmail) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PatientEmail.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PatientExistsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PatientExistsResponse.deserialize(new Uint8Array(bytes))
            },
            SendLoginLink: {
                path: "/patient.PatientProto/SendLoginLink",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SendLoginLinkRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendLoginLinkRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SendLoginLinkResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SendLoginLinkResponse.deserialize(new Uint8Array(bytes))
            },
            ValidateLogin: {
                path: "/patient.PatientProto/ValidateLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ValidateLoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ValidateLoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ValidateLoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ValidateLoginResponse.deserialize(new Uint8Array(bytes))
            },
            ChangePassword: {
                path: "/patient.PatientProto/ChangePassword",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChangePasswordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChangePasswordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChangePasswordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChangePasswordResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetPatientById(call: grpc_1.ServerUnaryCall<GetPatientByIdRequest, GetPatientByIdResponse>, callback: grpc_1.sendUnaryData<GetPatientByIdResponse>): void;
        abstract GetAllPatients(call: grpc_1.ServerUnaryCall<Empty, GetAllPatientsResponse>, callback: grpc_1.sendUnaryData<GetAllPatientsResponse>): void;
        abstract AddPatient(call: grpc_1.ServerUnaryCall<AddPatientRequest, AddPatientResponse>, callback: grpc_1.sendUnaryData<AddPatientResponse>): void;
        abstract UpdatePatient(call: grpc_1.ServerUnaryCall<UpdatePatientRequest, UpdatePatientResponse>, callback: grpc_1.sendUnaryData<UpdatePatientResponse>): void;
        abstract DeletePatient(call: grpc_1.ServerUnaryCall<DeletePatientRequest, DeletePatientResponse>, callback: grpc_1.sendUnaryData<DeletePatientResponse>): void;
        abstract GetPatientRendezVous(call: grpc_1.ServerUnaryCall<GetPatientRendezVousRequest, GetPatientRendezVousResponse>, callback: grpc_1.sendUnaryData<GetPatientRendezVousResponse>): void;
        abstract GetPatientByEmail(call: grpc_1.ServerUnaryCall<GetPatientByEmailRequest, GetPatientByEmailResponse>, callback: grpc_1.sendUnaryData<GetPatientByEmailResponse>): void;
        abstract CheckPatientExists(call: grpc_1.ServerUnaryCall<PatientEmail, PatientExistsResponse>, callback: grpc_1.sendUnaryData<PatientExistsResponse>): void;
        abstract SendLoginLink(call: grpc_1.ServerUnaryCall<SendLoginLinkRequest, SendLoginLinkResponse>, callback: grpc_1.sendUnaryData<SendLoginLinkResponse>): void;
        abstract ValidateLogin(call: grpc_1.ServerUnaryCall<ValidateLoginRequest, ValidateLoginResponse>, callback: grpc_1.sendUnaryData<ValidateLoginResponse>): void;
        abstract ChangePassword(call: grpc_1.ServerUnaryCall<ChangePasswordRequest, ChangePasswordResponse>, callback: grpc_1.sendUnaryData<ChangePasswordResponse>): void;
    }
    export class PatientProtoClient extends grpc_1.makeGenericClientConstructor(UnimplementedPatientProtoService.definition, "PatientProto", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetPatientById: GrpcUnaryServiceInterface<GetPatientByIdRequest, GetPatientByIdResponse> = (message: GetPatientByIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPatientByIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPatientByIdResponse>, callback?: grpc_1.requestCallback<GetPatientByIdResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPatientById(message, metadata, options, callback);
        };
        GetAllPatients: GrpcUnaryServiceInterface<Empty, GetAllPatientsResponse> = (message: Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllPatientsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllPatientsResponse>, callback?: grpc_1.requestCallback<GetAllPatientsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllPatients(message, metadata, options, callback);
        };
        AddPatient: GrpcUnaryServiceInterface<AddPatientRequest, AddPatientResponse> = (message: AddPatientRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddPatientResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddPatientResponse>, callback?: grpc_1.requestCallback<AddPatientResponse>): grpc_1.ClientUnaryCall => {
            return super.AddPatient(message, metadata, options, callback);
        };
        UpdatePatient: GrpcUnaryServiceInterface<UpdatePatientRequest, UpdatePatientResponse> = (message: UpdatePatientRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdatePatientResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdatePatientResponse>, callback?: grpc_1.requestCallback<UpdatePatientResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdatePatient(message, metadata, options, callback);
        };
        DeletePatient: GrpcUnaryServiceInterface<DeletePatientRequest, DeletePatientResponse> = (message: DeletePatientRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeletePatientResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeletePatientResponse>, callback?: grpc_1.requestCallback<DeletePatientResponse>): grpc_1.ClientUnaryCall => {
            return super.DeletePatient(message, metadata, options, callback);
        };
        GetPatientRendezVous: GrpcUnaryServiceInterface<GetPatientRendezVousRequest, GetPatientRendezVousResponse> = (message: GetPatientRendezVousRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPatientRendezVousResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPatientRendezVousResponse>, callback?: grpc_1.requestCallback<GetPatientRendezVousResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPatientRendezVous(message, metadata, options, callback);
        };
        GetPatientByEmail: GrpcUnaryServiceInterface<GetPatientByEmailRequest, GetPatientByEmailResponse> = (message: GetPatientByEmailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPatientByEmailResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPatientByEmailResponse>, callback?: grpc_1.requestCallback<GetPatientByEmailResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPatientByEmail(message, metadata, options, callback);
        };
        CheckPatientExists: GrpcUnaryServiceInterface<PatientEmail, PatientExistsResponse> = (message: PatientEmail, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PatientExistsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PatientExistsResponse>, callback?: grpc_1.requestCallback<PatientExistsResponse>): grpc_1.ClientUnaryCall => {
            return super.CheckPatientExists(message, metadata, options, callback);
        };
        SendLoginLink: GrpcUnaryServiceInterface<SendLoginLinkRequest, SendLoginLinkResponse> = (message: SendLoginLinkRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendLoginLinkResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SendLoginLinkResponse>, callback?: grpc_1.requestCallback<SendLoginLinkResponse>): grpc_1.ClientUnaryCall => {
            return super.SendLoginLink(message, metadata, options, callback);
        };
        ValidateLogin: GrpcUnaryServiceInterface<ValidateLoginRequest, ValidateLoginResponse> = (message: ValidateLoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ValidateLoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ValidateLoginResponse>, callback?: grpc_1.requestCallback<ValidateLoginResponse>): grpc_1.ClientUnaryCall => {
            return super.ValidateLogin(message, metadata, options, callback);
        };
        ChangePassword: GrpcUnaryServiceInterface<ChangePasswordRequest, ChangePasswordResponse> = (message: ChangePasswordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChangePasswordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChangePasswordResponse>, callback?: grpc_1.requestCallback<ChangePasswordResponse>): grpc_1.ClientUnaryCall => {
            return super.ChangePassword(message, metadata, options, callback);
        };
    }
}
